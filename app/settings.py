"""
Django settings for app project.
Generated by 'django-admin startproject' using Django 4.2.7.
"""

from pathlib import Path
from datetime import timedelta 
import os

# Пути сборки внутри проекта выглядят следующим образом: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# секретная строка (случайная последовательность символов), которая используется для криптографических операций в Django
SECRET_KEY = 'django-insecure-*5=q)@ku^245v2b%oxejv!6)*8+znn!%k_m%v6i%wcacvvxb(n'

# включение режима отладки
DEBUG = True

# список доменных имён и IP-адресов, с которых разрешены запросы к вашему приложению
ALLOWED_HOSTS = ['localhost', '127.0.0.1']


# Подключение зависимостей
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'django.contrib.postgres',
    
    'debug_toolbar',

    'main.apps.AxesConfig',

    'main',
    'goods',
    'users',
    'carts',
    'orders',
]

# список классов и функций промежуточного программного обеспечения (middleware), которые обрабатывают HTTP-запросы
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'axes.middleware.AxesMiddleware',
    'debug_toolbar.middleware.DebugToolbarMiddleware',
]

# указатель на файл с корневой конфигурацией URL-адресов проекта
ROOT_URLCONF = 'app.urls'

# шаблоны (templates) для генерации HTML-страниц
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# в настоящем приложении будет использоваться WSGI (для стандартных HTTP-запросов в синхронном режиме)
# но объявить надо было 2 файла asgi.py и wsgi.py: так установлено правилами фреймворка
WSGI_APPLICATION = 'app.wsgi.application'


# Параметры подключения к базе данных PostgreSQL
DATABASES = {
        'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'home',
        'USER': 'home',
        'PASSWORD': 'home',
        'HOST': 'localhost',
        'PORT': '5432',
    }
}


# Валидаторы проверки соответствия пароля определённым требованиям (длина, сложность, уникальность)
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator', #проверка сходства с другими полями (имя, фамилия, почта)
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',   #проверка длины
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',  #проверка наличия в списке частоиспользуемых паролей
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator', #сложность пароля (д.б. не только из цифр)
    },
]


# Локализация под русский язык, пермское время

LANGUAGE_CODE = 'ru-RU'
TIME_ZONE = 'Asia/Yekaterinburg'

USE_I18N = True #перевод текстового контента приложения (ярлыки, сообщения и т. д.) на разные языки (в данном приложении - на русский язык)

USE_TZ = True #преобразует время в локальный часовой пояс

# URL адрес для браузера
STATIC_URL = 'static/'

STATICFILES_DIRS = [BASE_DIR / 'static']

# место сохранения изображений 
MEDIA_URL = 'media/'
MEDIA_ROOT = BASE_DIR / 'media'


# Тип поля первичного ключа по умолчанию для моделей, в которых нет поля с primary_key=True
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
AUTH_USER_MODEL = 'users.USER' #модель пользователя для аутентификации
LOGIN_URL = '/user/login/'
INTERNAL_IPS = [
    # ...
    "127.0.0.1",
    # ...
]

AUTHENTICATION_BACKENDS = [
    'axes.backends.AxesBackend',    # бэкенд аутентификации из пакета django-axes (отслеживание и блокировку неудачных попыток входа)
    'django.contrib.auth.backends.ModelBackend', #стандартный бэкенд Django (проверяет имя пользователя и пароль в базе данных)
    #'users.authentication.EmailAuthBackend',
]
AXES_LOCKOUT_PARAMETERS = [["ip_address", "user_agent", "username"]] # каждого пользователя определяют 3 параметра: ip-адрес, имя браузера и имя пользователя
AXES_FAILURE_LIMIT = 5  # максимум 5 неудачных попыток
AXES_COOLOFF_TIME = timedelta (minutes = 30)  # время блокировки 30 минут
AXES_LOCK_OUT_AT_FAILURE = True #после 5 неудачных попыток происходит блокировка аккаунта
AXES_RESET_ON_SUCCESS = True #после успешного входа в систему сбрасывается количество неудачных попыток входа

SESSION_COOKIE_AGE = 1800   # сессия истекает через 30 минут
SESSION_EXPIRE_AT_BROWSER_CLOSE = True  # выход из аккаунта при закрытии браузера
SESSION_SAVE_EVERY_REQUEST = True # обновлять время жизни сессии при каждом запросе


EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
EMAIL_HOST = 'localhost'
EMAIL_PORT = 1025
# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# EMAIL_HOST = 'smtp.example.com'
# EMAIL_PORT = 587
# EMAIL_USE_TLS = True
# EMAIL_HOST_USER = 'your_email@example.com'
# EMAIL_HOST_PASSWORD = 'your_password'
# DEFAULT_FROM_EMAIL = 'webmaster@example.com'
